/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SimpactII.TimeOperators;

import SimpactII.Agents.Agent;
import SimpactII.SimpactII;
import ec.util.MersenneTwisterFast;
import java.util.HashMap;
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.util.Distributions.*;

/**
 *
 * @author visiting_researcher
 */
public class DemographicTimeOperator extends TimeOperator{
    
    private MersenneTwisterFast random;
    private double[][] mortTable;
    private double[] fertTable;
    private SimpactII state;
                
    //create anonymous agent to inject 100 new agents every 5 years
    @Override
    public void preProcess(SimpactII state){
        loadMortTable();
        loadFertTable(); 
        this.random = state.random;
        this.state = state;
        
        //once a year come alive to initiate new agents
        Steppable demoStepper = new Steppable() {
            @Override
            public void step(SimState state) {
                SimpactII s = (SimpactII) state;
                
                Distribution times = new UniformDistribution(1, 52*5);
                int year = (int) Math.min(5,Math.floor((state.schedule.getTime()+1)/(52*5)));
                double add = (s.network.allNodes.size()*fertTable[year]); 
                System.out.println("----" + state.schedule.getTime() + "-----");
                System.out.println(" year " + year + " add " + add + " | percentage"
                        + " increase = " + fertTable[year] );//+ " population = " +
//                        s.network.allNodes.size());
                for(int i = 0; i< add; i++){
                    //set a time to make an agent
                    state.schedule.scheduleOnceIn(times.nextValue(), new Steppable(){
                        @Override
                        public void step(SimState ss) {
                            SimpactII s = (SimpactII) ss;
                            Agent a = new Agent(s,new HashMap<String,Object>());
                            a.age = 0;
                        }                        
                    });                    
                }
            }
        };
        state.schedule.scheduleOnce(1, demoStepper);
        state.schedule.scheduleRepeating(demoStepper, 52*5);
    }
    //no one is replacing anyone here...
    @Override
    public void replace(SimpactII state, Agent agent){
        
    }
    
    //remove based on mortality curves -- from ASSA2008 / Johnson paper
    @Override
    public boolean remove(Agent agent){        
        return false;
//        int year = (int) Math.floor(state.schedule.getTime()/52);
//        year = (int) Math.min(30, year);
//        int age = (int) ((Math.max(Math.floor(agent.age/5) , 2)) - 2); //for [inital] simplicity there's no gender and 0-10 lumped with 10-14
//        age = (int) Math.min(age, 15); //lump > 75 together
//        //System.out.println("age = " + age + " year " + year);
//        return this.random.nextDouble() < (mortTable[age][year]/52); //divide by 52 b/c it's yearly mortality
    }

    private void loadMortTable() {
        mortTable = new double[][]{
            {0.000936673, 0.000949614, 0.000948507, 0.00095608, 0.000924816, 0.000964946, 0.000964779, 0.000957921, 0.000954052, 0.000952816, 0.000950416, 0.000955955, 0.000913172, 0.000939103, 0.000938502, 0.000959294, 0.000931169, 0.000922356, 0.000913169, 0.000903613, 0.000893728, 0.000883526, 0.000870419, 0.00085996, 0.000852561, 0.0008479, 0.000844332, 0.000835389, 0.000825943, 0.000816511, 0.000807604, 0.000799849, 0.000792719, 0.00078555, 0.000778345, 0.000770866, 0.000763246, 0.000755734, 0.000748306, 0.000740942, 0.00073365 },
            {0.002583314, 0.002568548, 0.002563564, 0.002565772, 0.002474882, 0.002575768, 0.002578582, 0.002562097, 0.002545196, 0.002535835, 0.002517593, 0.002496664, 0.002142192, 0.002331855, 0.002377128, 0.002380681, 0.002369131, 0.002354864, 0.002337814, 0.002318297, 0.002297954, 0.002278607, 0.002259361, 0.002239435, 0.002218862, 0.002197717, 0.002176036, 0.002148676, 0.00212731, 0.002111288, 0.002099409, 0.00209068, 0.002071371, 0.002050937, 0.002030586, 0.002011103, 0.001993821, 0.001977916, 0.001961923, 0.001945878, 0.001929312 },
            {0.00446671, 0.00449335, 0.004532219, 0.004578289, 0.004466963, 0.004670261, 0.004714575, 0.004721283, 0.004743144, 0.004785546, 0.004830836, 0.004879058, 0.00490766, 0.005010985, 0.004810706, 0.004690148, 0.004643565, 0.004604654, 0.004569011, 0.004537325, 0.004508975, 0.004482369, 0.00445452, 0.004424618, 0.004393301, 0.004361789, 0.004331051, 0.004300383, 0.00426927, 0.004237773, 0.004205936, 0.004173748, 0.004136101, 0.004105743, 0.004079757, 0.004056265, 0.004033507, 0.004003582, 0.003972773, 0.003942447, 0.003913094 },
            {0.00541419, 0.005487102, 0.005575895, 0.005676544, 0.005599299, 0.005893762, 0.006006566, 0.006076933, 0.006155519, 0.006230716, 0.006310913, 0.006399839, 0.006629477, 0.006837118, 0.006416735, 0.005787935, 0.005605185, 0.005564798, 0.005524192, 0.005483138, 0.005441706, 0.005400293, 0.005359432, 0.005319563, 0.005280809, 0.005243001, 0.005205777, 0.005168509, 0.00513108, 0.005093611, 0.005056316, 0.005019418, 0.004982784, 0.004946312, 0.004910019, 0.00487391, 0.00483799, 0.004801294, 0.00476644, 0.004732299, 0.004698605 },
            {0.005848864, 0.005949424, 0.006062239, 0.006182475, 0.00612582, 0.006430871, 0.006562931, 0.006667991, 0.006790234, 0.006912283, 0.007036518, 0.00715831, 0.007341672, 0.007666404, 0.007279769, 0.006305369, 0.006010174, 0.005951451, 0.005894052, 0.00583825, 0.005783883, 0.005730564, 0.00567775, 0.005624956, 0.005571914, 0.005518697, 0.005465626, 0.005413256, 0.005362035, 0.005312131, 0.005263364, 0.005215431, 0.005167853, 0.005120338, 0.005072837, 0.005025619, 0.004979027, 0.00493293, 0.004887219, 0.004841893, 0.004796973 },
            {0.006742747, 0.006847282, 0.006962078, 0.007082852, 0.007030508, 0.007324245, 0.007445803, 0.007537471, 0.007640415, 0.007742654, 0.007847435, 0.007954996, 0.008466551, 0.008600844, 0.008310924, 0.007209749, 0.007046733, 0.006972145, 0.006897491, 0.006821875, 0.006744954, 0.006667375, 0.006590768, 0.006516863, 0.006446432, 0.006379176, 0.006314019, 0.006249514, 0.006184236, 0.006117352, 0.00604897, 0.005980198, 0.005912825, 0.005848368, 0.005787399, 0.005729432, 0.005673394, 0.005617196, 0.005560047, 0.005502182, 0.005444523 },
            {0.00874723, 0.008806214, 0.008896824, 0.00901823, 0.008980265, 0.009320763, 0.009483282, 0.009617934, 0.00976248, 0.009906878, 0.010048853, 0.010189157, 0.010704057, 0.01077921, 0.010307959, 0.00904874, 0.009015151, 0.008919578, 0.008824091, 0.008729359, 0.0086363, 0.008545137, 0.00845527, 0.008365099, 0.008273175, 0.008178892, 0.008083251, 0.007988849, 0.007898485, 0.007813445, 0.007733286, 0.007656261, 0.007580006, 0.007502101, 0.007421114, 0.007337184, 0.007252166, 0.00716911, 0.007090648, 0.007017821, 0.006949869 },
            {0.012318188, 0.012445847, 0.012566099, 0.01265901, 0.012513321, 0.012774595, 0.01284008, 0.012912215, 0.013037653, 0.013198934, 0.013374659, 0.013553049, 0.01422209, 0.014519613, 0.014180566, 0.012826914, 0.012377197, 0.012252932, 0.012132734, 0.012016909, 0.011904581, 0.011794333, 0.011683962, 0.011572788, 0.01146211, 0.011353706, 0.011248082, 0.011144153, 0.011038987, 0.010929922, 0.010815803, 0.010698353, 0.010582311, 0.010472808, 0.010372235, 0.010279835, 0.010192465, 0.010105794, 0.010015291, 0.009918283, 0.009814979 },
            {0.018047298, 0.018118467, 0.018208526, 0.018312183, 0.018177622, 0.018537797, 0.018639322, 0.018674787, 0.018692932, 0.018709272, 0.018707887, 0.018724077, 0.019368365, 0.019856053, 0.019803469, 0.018631111, 0.017915269, 0.017772628, 0.017627782, 0.017479752, 0.017329632, 0.017179748, 0.01703265, 0.016889992, 0.016752191, 0.016618351, 0.016486867, 0.016354944, 0.016221861, 0.016089533, 0.015960192, 0.015834132, 0.015709896, 0.015583595, 0.015451627, 0.015312517, 0.015168938, 0.015027212, 0.014894021, 0.014772369, 0.014661193 },
            {0.024742221, 0.024873868, 0.024998615, 0.025097817, 0.02491364, 0.02521476, 0.025259481, 0.02526511, 0.025300588, 0.025386298, 0.025463556, 0.025530796, 0.026432004, 0.026580352, 0.026489965, 0.025375045, 0.02441627, 0.024191071, 0.023986244, 0.023801849, 0.02363069, 0.023464397, 0.023297415, 0.02312722, 0.022952507, 0.022774682, 0.022596704, 0.022421786, 0.022252101, 0.022088352, 0.021929564, 0.021773847, 0.021617893, 0.021460664, 0.021304152, 0.021150964, 0.021001599, 0.020854345, 0.020704702, 0.020548566, 0.020384158 },
            {0.034256524, 0.034105431, 0.034007024, 0.033965573, 0.033727098, 0.033977382, 0.033979609, 0.033917137, 0.03383967, 0.03378253, 0.033688486, 0.033585815, 0.034533428, 0.03481406, 0.035623057, 0.034701474, 0.033799081, 0.033600696, 0.033376285, 0.033116333, 0.032825775, 0.0325234, 0.032235283, 0.031978733, 0.031753927, 0.031549253, 0.03135123, 0.031150852, 0.030944238, 0.030729401, 0.030508798, 0.030287357, 0.030070435, 0.029861628, 0.029662127, 0.029470315, 0.029283059, 0.029094953, 0.028904248, 0.028714023, 0.028528343 },
            {0.048230163, 0.048412513, 0.048606652, 0.0487518, 0.048576081, 0.048708653, 0.048618436, 0.048543549, 0.048572225, 0.048734817, 0.048928472, 0.049125311, 0.049740201, 0.050031147, 0.050756846, 0.050059041, 0.049404415, 0.049018376, 0.048661635, 0.048352076, 0.048090524, 0.047860609, 0.047623776, 0.047346758, 0.047013492, 0.046630404, 0.046225907, 0.045840606, 0.045502275, 0.045213006, 0.044955618, 0.044708848, 0.044457845, 0.044196626, 0.043921411, 0.04363603, 0.043348463, 0.043067846, 0.042800341, 0.042548583, 0.042310046 },
            {0.066435031, 0.067091842, 0.067571433, 0.068104889, 0.068535136, 0.069173816, 0.069677149, 0.070149267, 0.070551502, 0.070811807, 0.070951132, 0.071089648, 0.070739635, 0.070725054, 0.070885495, 0.070900482, 0.070905432, 0.070859229, 0.070766768, 0.070618847, 0.070427621, 0.070221534, 0.070020754, 0.069855298, 0.069747654, 0.069698452, 0.069684584, 0.069655846, 0.069569537, 0.069406282, 0.069174983, 0.068913568, 0.06867464, 0.068493207, 0.068369267, 0.068280392, 0.068200125, 0.068110841, 0.068004865, 0.06787882, 0.06773808 },
            {0.090188679, 0.090934966, 0.091728117, 0.092936096, 0.094346923, 0.095461673, 0.0964787, 0.09729102, 0.098144588, 0.09894767, 0.099739024, 0.100439279, 0.099945733, 0.099754025, 0.099321882, 0.098869309, 0.098448882, 0.098101902, 0.097891324, 0.097806768, 0.097796541, 0.097802728, 0.097779867, 0.097699029, 0.097548935, 0.097344875, 0.097123229, 0.096908812, 0.096740076, 0.096645753, 0.096626332, 0.096650783, 0.096654908, 0.096583895, 0.096412974, 0.096153487, 0.095854973, 0.095585377, 0.095389315, 0.09526577, 0.095186297 },
            {0.117916771, 0.119312923, 0.120701798, 0.122097827, 0.123912588, 0.125054167, 0.126623995, 0.128283193, 0.130429895, 0.132582891, 0.134623231, 0.136313488, 0.135898708, 0.135930279, 0.135853735, 0.135710006, 0.135414406, 0.135511237, 0.135516448, 0.135278085, 0.134830081, 0.134316598, 0.133897604, 0.133672554, 0.133627264, 0.133688991, 0.133775169, 0.133820278, 0.133781936, 0.13364334, 0.133426389, 0.133183946, 0.132952108, 0.132786881, 0.132730213, 0.132783286, 0.132901314, 0.132990302, 0.132968948, 0.132799814, 0.132499146 },
            {0.168310696, 0.174582082, 0.185501633, 0.174385074, 0.183907338, 0.172432461, 0.179601621, 0.182743093, 0.185078072, 0.187057167, 0.188961813, 0.191099921, 0.191721706, 0.193945826, 0.19642756, 0.198826154, 0.200887506, 0.202664402, 0.20408736, 0.205206723, 0.206276578, 0.207352208, 0.208343073, 0.209097506, 0.209417223, 0.209172979, 0.208492167, 0.20763768, 0.206895154, 0.206428986, 0.206293949, 0.206409972, 0.206651868, 0.206870358, 0.206956223, 0.206854283, 0.206610192, 0.20626527, 0.205958377, 0.205831565, 0.205964069 },
        };
    }
    
    private void loadFertTable(){
        //yearly population increases
        fertTable = new double[] {0.134339272, 0.115528226,
            0.125251526, 0.081105926, 0.067747571, 0.048961991};
    }
}
