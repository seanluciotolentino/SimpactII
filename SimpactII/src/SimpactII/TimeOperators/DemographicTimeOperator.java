package SimpactII.TimeOperators;

import SimpactII.Agents.*;
import SimpactII.SimpactII;
import java.util.HashMap;
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.util.Bag;

/**
 *
 * @author Lucio Tolentino
 * 
 * 
 * 
 */
public class DemographicTimeOperator extends TimeOperator{
    
    private double[][] maleMortality;
    private double[][] femaleMortality;
    private double[][] femaleChildMortality;
    private double[][] maleChildMortality;
    private int maxYears;
    
    private double[][] fertility; 
    private SimpactII state; //need to grab the RNG and schedule time in remove method
    
    //for maintainging the agent distribution
    private Bag agents;
    private int[] num;
    private Bag attributes;
                
    //create anonymous agent to inject 100 new agents every 5 years
    @Override
    public void preProcess(SimpactII state){
        this.state = state; 
        grabAgentDistribution();
        loadMortality();
        loadFertility(); 
        maxYears = fertility[0].length-1;
        
        //go through females and flip a coin whether they have a child
        state.schedule.scheduleRepeating(new Steppable(){
            @Override
            public void step(SimState state) {
                SimpactII s = (SimpactII) state;
                int year = (int) Math.min(maxYears,Math.floor((state.schedule.getTime()+1)/52));
                Bag myAgents = s.network.allNodes;
                int numAgents = myAgents.size();
                for (int i = 0; i < numAgents; i++){
                    Agent agent = (Agent) myAgents.get(i);
                    if(agent.isMale() || agent.age >= 50 || agent.age < 15){ continue; }
                    
                    int age = (int) Math.floor(agent.age/5)-3 ;                    
                    if(s.random.nextDouble() < fertility[age][year]){
                        newAgent(s);
                    }
                }
            }//end  step            
        }, 52); //end schedule
    }
    
    //no one is replacing anyone here...
    @Override
    public void replace(SimpactII state, Agent agent){ return; }
    
    //remove based on mortality curves -- from ASSA2008 / Johnson paper
    public boolean remove(Agent agent){ //AIDS death will occur after coin flip
        boolean HIVdeath = false;
        Double ttd = (Double) agent.attributes.get("AIDSDeath");
        if(ttd != null &&  state.schedule.getTime() > ttd.doubleValue())
            HIVdeath = true;
			
        //return false;
        int year = (int) Math.floor(state.schedule.getTime()/52);
        year = (int) Math.min(maxYears, year); //no data beyond maxYears (2025)
        int age = (int) Math.floor(agent.age/5) - 2; 
        age = (int) Math.min(age, 15); //lump > 75 together
        
        //use correct mortality table
        if( agent.isMale())
            if(age < 0)
                return HIVdeath || state.random.nextDouble() < (maleChildMortality[(int) Math.floor(agent.age)][year]);
            else
                return HIVdeath || state.random.nextDouble() < (maleMortality[age][year]); //divide by 52 b/c it's yearly mortality            
        else
            if(age < 0)
                return HIVdeath || state.random.nextDouble() < (femaleChildMortality[(int) Math.floor(agent.age)][year]); 
            else
                return HIVdeath || state.random.nextDouble() < (femaleMortality[age][year]);             
        //end if statements
            
        
    }

    private void loadMortality() {
        //age: 10-14,15-19,20-24,...,80-84,85+
        //year: 1985,1986,...,2025
        //mortTable[age][year]
        maleMortality = new double[][]{
            {1.80E-05, 1.83E-05, 1.82E-05, 1.84E-05, 1.78E-05, 1.86E-05, 1.86E-05, 1.84E-05, 1.84E-05, 1.83E-05, 1.83E-05, 1.84E-05, 1.76E-05, 1.81E-05, 1.81E-05, 1.85E-05, 1.79E-05, 1.77E-05, 1.76E-05, 1.74E-05, 1.72E-05, 1.70E-05, 1.67E-05, 1.65E-05, 1.64E-05, 1.63E-05, 1.62E-05, 1.61E-05, 1.59E-05, 1.57E-05, 1.55E-05, 1.54E-05, 1.53E-05, 1.51E-05, 1.50E-05, 1.48E-05, 1.47E-05, 1.45E-05, 1.44E-05, 1.43E-05, 1.41E-05},
            {4.97E-05, 4.95E-05, 4.94E-05, 4.94E-05, 4.77E-05, 4.96E-05, 4.97E-05, 4.93E-05, 4.90E-05, 4.88E-05, 4.85E-05, 4.81E-05, 4.12E-05, 4.49E-05, 4.58E-05, 4.58E-05, 4.56E-05, 4.53E-05, 4.50E-05, 4.46E-05, 4.42E-05, 4.39E-05, 4.35E-05, 4.31E-05, 4.27E-05, 4.23E-05, 4.19E-05, 4.14E-05, 4.10E-05, 4.06E-05, 4.04E-05, 4.02E-05, 3.99E-05, 3.95E-05, 3.91E-05, 3.87E-05, 3.84E-05, 3.81E-05, 3.78E-05, 3.75E-05, 3.71E-05},
            {8.61E-05, 8.66E-05, 8.74E-05, 8.82E-05, 8.61E-05, 9.00E-05, 9.09E-05, 9.10E-05, 9.14E-05, 9.22E-05, 9.31E-05, 9.41E-05, 9.46E-05, 9.66E-05, 9.27E-05, 9.04E-05, 8.95E-05, 8.88E-05, 8.81E-05, 8.75E-05, 8.69E-05, 8.64E-05, 8.59E-05, 8.53E-05, 8.47E-05, 8.41E-05, 8.35E-05, 8.29E-05, 8.23E-05, 8.17E-05, 8.11E-05, 8.04E-05, 7.97E-05, 7.91E-05, 7.86E-05, 7.82E-05, 7.77E-05, 7.71E-05, 7.65E-05, 7.60E-05, 7.54E-05},
            {0.0001044, 0.00010581, 0.00010752, 0.00010947, 0.00010798, 0.00011367, 0.00011585, 0.00011721, 0.00011873, 0.00012019, 0.00012174, 0.00012346, 0.00012791, 0.00013193, 0.00012379, 0.00011162, 0.00010809, 0.00010731, 0.00010652, 0.00010573, 0.00010493, 0.00010413, 0.00010334, 0.00010257, 0.00010182, 0.00010109, 0.00010037, 9.96E-05, 9.89E-05, 9.82E-05, 9.75E-05, 9.68E-05, 9.61E-05, 9.54E-05, 9.47E-05, 9.40E-05, 9.33E-05, 9.26E-05, 9.19E-05, 9.12E-05, 9.06E-05},
            {0.0001128, 0.00011475, 0.00011693, 0.00011926, 0.00011816, 0.00012406, 0.00012662, 0.00012865, 0.00013102, 0.00013338, 0.00013579, 0.00013815, 0.0001417, 0.00014799, 0.0001405, 0.00012163, 0.00011592, 0.00011479, 0.00011368, 0.0001126, 0.00011155, 0.00011051, 0.00010949, 0.00010847, 0.00010745, 0.00010642, 0.00010539, 0.00010438, 0.00010339, 0.00010242, 0.00010148, 0.00010055, 9.96E-05, 9.87E-05, 9.78E-05, 9.69E-05, 9.60E-05, 9.51E-05, 9.42E-05, 9.33E-05, 9.25E-05},
            {0.0001301, 0.00013212, 0.00013435, 0.00013668, 0.00013567, 0.00014136, 0.00014371, 0.00014549, 0.00014748, 0.00014947, 0.0001515, 0.00015358, 0.0001635, 0.0001661, 0.00016048, 0.00013914, 0.00013598, 0.00013454, 0.00013309, 0.00013163, 0.00013014, 0.00012864, 0.00012716, 0.00012573, 0.00012436, 0.00012306, 0.0001218, 0.00012055, 0.00011929, 0.000118, 0.00011667, 0.00011534, 0.00011404, 0.00011279, 0.00011161, 0.00011049, 0.00010941, 0.00010832, 0.00010722, 0.0001061, 0.00010498},
            {0.00016894, 0.00017009, 0.00017184, 0.0001742, 0.00017346, 0.00018007, 0.00018322, 0.00018584, 0.00018864, 0.00019145, 0.00019421, 0.00019693, 0.00020694, 0.0002084, 0.00019924, 0.00017479, 0.00017414, 0.00017229, 0.00017043, 0.0001686, 0.00016679, 0.00016502, 0.00016328, 0.00016153, 0.00015975, 0.00015792, 0.00015607, 0.00015424, 0.00015249, 0.00015084, 0.00014928, 0.00014779, 0.00014631, 0.0001448, 0.00014324, 0.00014161, 0.00013996, 0.00013835, 0.00013683, 0.00013542, 0.00013411},
            {0.00023833, 0.00024082, 0.00024316, 0.00024497, 0.00024213, 0.00024722, 0.00024849, 0.0002499, 0.00025234, 0.00025548, 0.00025891, 0.00026238, 0.00027543, 0.00028123, 0.00027462, 0.00024824, 0.00023948, 0.00023706, 0.00023472, 0.00023247, 0.00023028, 0.00022814, 0.00022599, 0.00022383, 0.00022167, 0.00021957, 0.00021751, 0.00021549, 0.00021345, 0.00021133, 0.00020911, 0.00020682, 0.00020457, 0.00020244, 0.00020049, 0.00019869, 0.000197, 0.00019531, 0.00019355, 0.00019167, 0.00018966},
            {0.00035017, 0.00035157, 0.00035333, 0.00035536, 0.00035272, 0.00035978, 0.00036177, 0.00036246, 0.00036282, 0.00036314, 0.00036311, 0.00036343, 0.00037605, 0.00038561, 0.00038458, 0.0003616, 0.00034759, 0.0003448, 0.00034196, 0.00033906, 0.00033613, 0.0003332, 0.00033032, 0.00032753, 0.00032483, 0.00032222, 0.00031965, 0.00031707, 0.00031447, 0.00031188, 0.00030935, 0.00030689, 0.00030447, 0.000302, 0.00029942, 0.00029671, 0.0002939, 0.00029114, 0.00028854, 0.00028616, 0.00028399},
            {0.00048168, 0.00048428, 0.00048674, 0.00048869, 0.00048506, 0.000491, 0.00049188, 0.00049199, 0.00049269, 0.00049438, 0.0004959, 0.00049723, 0.00051501, 0.00051794, 0.00051616, 0.00049416, 0.00047526, 0.00047082, 0.00046679, 0.00046316, 0.00045979, 0.00045651, 0.00045323, 0.00044988, 0.00044644, 0.00044294, 0.00043944, 0.000436, 0.00043266, 0.00042945, 0.00042632, 0.00042326, 0.0004202, 0.00041711, 0.00041404, 0.00041103, 0.00040809, 0.0004052, 0.00040227, 0.0003992, 0.00039598},
            {0.0006701, 0.0006671, 0.00066514, 0.00066431, 0.00065957, 0.00066455, 0.00066459, 0.00066335, 0.00066181, 0.00066067, 0.0006588, 0.00065676, 0.00067561, 0.0006812, 0.00069732, 0.00067896, 0.000661, 0.00065706, 0.00065259, 0.00064743, 0.00064165, 0.00063564, 0.00062992, 0.00062483, 0.00062037, 0.0006163, 0.00061237, 0.0006084, 0.0006043, 0.00060004, 0.00059567, 0.00059128, 0.00058698, 0.00058284, 0.00057889, 0.00057509, 0.00057138, 0.00056766, 0.00056388, 0.00056012, 0.00055644},
            {0.00095016, 0.00095385, 0.00095777, 0.0009607, 0.00095715, 0.00095983, 0.000958, 0.00095649, 0.00095707, 0.00096035, 0.00096427, 0.00096824, 0.00098067, 0.00098655, 0.0010012, 0.00098712, 0.00097388, 0.00096608, 0.00095888, 0.00095263, 0.00094735, 0.00094271, 0.00093793, 0.00093234, 0.00092562, 0.0009179, 0.00090975, 0.00090199, 0.00089518, 0.00088935, 0.00088418, 0.00087921, 0.00087416, 0.00086891, 0.00086338, 0.00085765, 0.00085187, 0.00084623, 0.00084086, 0.00083581, 0.00083102},
            {0.0013211, 0.0013347, 0.0013445, 0.0013555, 0.0013644, 0.0013776, 0.001388, 0.0013977, 0.001406, 0.0014114, 0.0014143, 0.0014171, 0.0014099, 0.0014096, 0.0014129, 0.0014132, 0.0014133, 0.0014124, 0.0014105, 0.0014074, 0.0014034, 0.0013992, 0.001395, 0.0013916, 0.0013894, 0.0013884, 0.0013881, 0.0013875, 0.0013857, 0.0013824, 0.0013776, 0.0013722, 0.0013673, 0.0013635, 0.001361, 0.0013591, 0.0013575, 0.0013556, 0.0013535, 0.0013509, 0.001348},
            {0.001816, 0.0018318, 0.0018485, 0.0018741, 0.0019039, 0.0019276, 0.0019492, 0.0019664, 0.0019846, 0.0020017, 0.0020185, 0.0020335, 0.002023, 0.0020189, 0.0020097, 0.002, 0.0019911, 0.0019837, 0.0019792, 0.0019774, 0.0019772, 0.0019773, 0.0019768, 0.0019751, 0.0019719, 0.0019676, 0.0019629, 0.0019583, 0.0019547, 0.0019527, 0.0019523, 0.0019528, 0.0019529, 0.0019514, 0.0019478, 0.0019423, 0.0019359, 0.0019302, 0.001926, 0.0019234, 0.0019217},
            {0.00241, 0.0024403, 0.0024706, 0.0025011, 0.0025408, 0.0025658, 0.0026003, 0.0026367, 0.002684, 0.0027316, 0.0027767, 0.0028142, 0.002805, 0.0028057, 0.002804, 0.0028008, 0.0027943, 0.0027964, 0.0027965, 0.0027912, 0.0027813, 0.0027699, 0.0027606, 0.0027557, 0.0027547, 0.002756, 0.0027579, 0.0027589, 0.0027581, 0.002755, 0.0027502, 0.0027449, 0.0027397, 0.0027361, 0.0027348, 0.002736, 0.0027386, 0.0027406, 0.0027401, 0.0027364, 0.0027297},
            {0.0035379, 0.0036829, 0.003938, 0.0036783, 0.0039006, 0.0036331, 0.0037998, 0.0038733, 0.0039281, 0.0039747, 0.0040196, 0.0040702, 0.0040849, 0.0041377, 0.0041967, 0.004254, 0.0043033, 0.0043459, 0.0043801, 0.0044071, 0.0044328, 0.0044588, 0.0044828, 0.004501, 0.0045087, 0.0045028, 0.0044864, 0.0044657, 0.0044478, 0.0044365, 0.0044333, 0.0044361, 0.0044419, 0.0044472, 0.0044492, 0.0044468, 0.0044409, 0.0044326, 0.0044252, 0.0044221, 0.0044253},
        };
        
        femaleMortality = new double[][]{
            {9.77E-06, 9.86E-06, 9.67E-06, 9.71E-06, 9.38E-06, 9.73E-06, 9.85E-06, 9.92E-06, 1.00E-05, 1.03E-05, 1.05E-05, 1.08E-05, 1.11E-05, 1.16E-05, 1.13E-05, 1.08E-05, 1.03E-05, 1.01E-05, 9.96E-06, 9.77E-06, 9.59E-06, 9.41E-06, 9.19E-06, 9.01E-06, 8.85E-06, 8.71E-06, 8.61E-06, 8.45E-06, 8.29E-06, 8.13E-06, 7.97E-06, 7.83E-06, 7.70E-06, 7.57E-06, 7.44E-06, 7.31E-06, 7.17E-06, 7.05E-06, 6.92E-06, 6.80E-06, 6.68E-06}, 
            {2.14E-05, 2.16E-05, 2.19E-05, 2.22E-05, 2.17E-05, 2.29E-05, 2.32E-05, 2.34E-05, 2.35E-05, 2.38E-05, 2.40E-05, 2.42E-05, 2.53E-05, 2.96E-05, 3.26E-05, 3.16E-05, 3.07E-05, 3.02E-05, 2.97E-05, 2.91E-05, 2.86E-05, 2.81E-05, 2.76E-05, 2.71E-05, 2.66E-05, 2.61E-05, 2.56E-05, 2.51E-05, 2.46E-05, 2.42E-05, 2.38E-05, 2.35E-05, 2.31E-05, 2.26E-05, 2.22E-05, 2.18E-05, 2.14E-05, 2.11E-05, 2.07E-05, 2.03E-05, 2.00E-05}, 
            {3.56E-05, 3.61E-05, 3.66E-05, 3.70E-05, 3.62E-05, 3.79E-05, 3.82E-05, 3.83E-05, 3.86E-05, 3.91E-05, 3.95E-05, 4.00E-05, 4.47E-05, 4.79E-05, 4.88E-05, 4.31E-05, 3.97E-05, 3.90E-05, 3.83E-05, 3.76E-05, 3.69E-05, 3.63E-05, 3.56E-05, 3.50E-05, 3.44E-05, 3.38E-05, 3.32E-05, 3.26E-05, 3.20E-05, 3.14E-05, 3.09E-05, 3.03E-05, 2.98E-05, 2.92E-05, 2.87E-05, 2.82E-05, 2.77E-05, 2.72E-05, 2.68E-05, 2.63E-05, 2.58E-05}, 
            {4.32E-05, 4.38E-05, 4.45E-05, 4.53E-05, 4.46E-05, 4.69E-05, 4.76E-05, 4.80E-05, 4.85E-05, 4.90E-05, 4.96E-05, 5.01E-05, 5.64E-05, 5.80E-05, 5.72E-05, 4.70E-05, 4.51E-05, 4.43E-05, 4.35E-05, 4.27E-05, 4.19E-05, 4.11E-05, 4.04E-05, 3.96E-05, 3.89E-05, 3.82E-05, 3.76E-05, 3.69E-05, 3.62E-05, 3.56E-05, 3.49E-05, 3.43E-05, 3.37E-05, 3.31E-05, 3.25E-05, 3.19E-05, 3.14E-05, 3.08E-05, 3.02E-05, 2.97E-05, 2.92E-05}, 
            {4.96E-05, 5.05E-05, 5.15E-05, 5.25E-05, 5.21E-05, 5.46E-05, 5.56E-05, 5.64E-05, 5.73E-05, 5.84E-05, 5.94E-05, 6.04E-05, 6.66E-05, 6.84E-05, 6.73E-05, 5.46E-05, 5.19E-05, 5.09E-05, 4.99E-05, 4.90E-05, 4.81E-05, 4.72E-05, 4.64E-05, 4.55E-05, 4.47E-05, 4.38E-05, 4.30E-05, 4.22E-05, 4.14E-05, 4.06E-05, 3.99E-05, 3.92E-05, 3.85E-05, 3.78E-05, 3.71E-05, 3.64E-05, 3.58E-05, 3.51E-05, 3.45E-05, 3.39E-05, 3.32E-05}, 
            {6.30E-05, 6.39E-05, 6.50E-05, 6.60E-05, 6.55E-05, 6.81E-05, 6.90E-05, 6.98E-05, 7.06E-05, 7.15E-05, 7.25E-05, 7.34E-05, 8.04E-05, 8.14E-05, 8.18E-05, 6.81E-05, 6.70E-05, 6.59E-05, 6.47E-05, 6.35E-05, 6.23E-05, 6.11E-05, 5.99E-05, 5.88E-05, 5.77E-05, 5.67E-05, 5.57E-05, 5.47E-05, 5.38E-05, 5.28E-05, 5.18E-05, 5.08E-05, 4.98E-05, 4.89E-05, 4.81E-05, 4.72E-05, 4.65E-05, 4.57E-05, 4.49E-05, 4.41E-05, 4.34E-05}, 
            {9.06E-05, 9.06E-05, 9.09E-05, 9.15E-05, 9.06E-05, 9.34E-05, 9.43E-05, 9.50E-05, 9.57E-05, 9.65E-05, 9.73E-05, 9.81E-05, 0.00010615, 0.00010914, 0.00010905, 9.47E-05, 9.46E-05, 9.30E-05, 9.14E-05, 8.98E-05, 8.84E-05, 8.69E-05, 8.55E-05, 8.41E-05, 8.27E-05, 8.13E-05, 7.98E-05, 7.84E-05, 7.70E-05, 7.57E-05, 7.45E-05, 7.34E-05, 7.22E-05, 7.11E-05, 6.99E-05, 6.87E-05, 6.74E-05, 6.63E-05, 6.51E-05, 6.41E-05, 6.31E-05}, 
            {0.00013685, 0.00013665, 0.00013636, 0.00013576, 0.00013255, 0.00013361, 0.0001325, 0.00013147, 0.00013094, 0.00013094, 0.00013098, 0.00013101, 0.0001415, 0.00014835, 0.00015301, 0.0001404, 0.00013335, 0.0001312, 0.00012911, 0.00012706, 0.00012506, 0.00012309, 0.00012115, 0.00011925, 0.00011739, 0.0001156, 0.00011386, 0.00011215, 0.00011045, 0.00010872, 0.00010697, 0.00010521, 0.00010349, 0.00010185, 0.00010031, 9.88E-05, 9.74E-05, 9.60E-05, 9.46E-05, 9.32E-05, 9.17E-05}, 
            {0.00020417, 0.00020271, 0.0002014, 0.00020019, 0.00019617, 0.00019775, 0.00019637, 0.00019435, 0.00019214, 0.0001901, 0.00018773, 0.00018544, 0.00019405, 0.00019989, 0.00020934, 0.00020097, 0.00019155, 0.00018857, 0.00018564, 0.00018275, 0.00017992, 0.00017715, 0.00017445, 0.00017182, 0.00016924, 0.00016671, 0.00016421, 0.00016175, 0.00015933, 0.00015697, 0.00015469, 0.00015249, 0.00015033, 0.00014816, 0.00014596, 0.00014371, 0.00014145, 0.00013924, 0.00013715, 0.00013518, 0.00013333}, 
            {0.00028724, 0.00028849, 0.00028971, 0.00029067, 0.00028792, 0.00029112, 0.00029079, 0.00028989, 0.00028921, 0.0002894, 0.00028954, 0.00028968, 0.00029386, 0.00029331, 0.0002954, 0.00028808, 0.00028446, 0.00027948, 0.00027493, 0.00027078, 0.00026689, 0.00026312, 0.0002594, 0.00025573, 0.00025209, 0.00024853, 0.00024505, 0.00024165, 0.00023833, 0.00023508, 0.00023187, 0.0002287, 0.00022555, 0.00022244, 0.00021943, 0.00021654, 0.00021375, 0.00021103, 0.00020827, 0.00020543, 0.00020249}, 
            {0.00040872, 0.00040851, 0.00040919, 0.00041095, 0.00041032, 0.00041642, 0.00041923, 0.00042122, 0.00042286, 0.00042483, 0.00042612, 0.00042714, 0.00042205, 0.0004199, 0.00042737, 0.00041691, 0.00040774, 0.00040287, 0.0003977, 0.00039207, 0.00038598, 0.00037968, 0.00037362, 0.00036809, 0.00036307, 0.00035838, 0.00035384, 0.00034935, 0.00034491, 0.00034052, 0.0003362, 0.00033197, 0.00032784, 0.00032379, 0.0003198, 0.00031587, 0.00031197, 0.0003081, 0.00030428, 0.00030056, 0.000297}, 
            {0.00058815, 0.00058953, 0.00059119, 0.00059256, 0.00058969, 0.00059099, 0.00058975, 0.00058911, 0.00058999, 0.00059272, 0.00059581, 0.0005989, 0.00059622, 0.00059691, 0.00060512, 0.00059785, 0.00059152, 0.00058284, 0.00057465, 0.00056715, 0.00056035, 0.00055398, 0.0005477, 0.00054106, 0.00053379, 0.00052589, 0.00051767, 0.00050972, 0.00050247, 0.00049595, 0.00048991, 0.00048408, 0.00047833, 0.00047264, 0.00046702, 0.00046147, 0.00045606, 0.00045078, 0.0004456, 0.00044051, 0.00043549}, 
            {0.00083419, 0.00084127, 0.00084548, 0.00084887, 0.00084963, 0.00085191, 0.00085194, 0.00085224, 0.0008523, 0.00085056, 0.00084721, 0.00084375, 0.00084282, 0.00084398, 0.00084758, 0.00084983, 0.00085208, 0.00084702, 0.00084132, 0.00083483, 0.00082769, 0.00082029, 0.0008131, 0.00080648, 0.00080075, 0.00079592, 0.00079163, 0.00078736, 0.00078242, 0.00077637, 0.00076921, 0.00076139, 0.00075385, 0.00074726, 0.00074167, 0.00073673, 0.00073201, 0.0007273, 0.00072258, 0.00071784, 0.00071312}, 
            {0.0011946, 0.0011997, 0.001204, 0.0012131, 0.0012248, 0.0012326, 0.0012391, 0.0012418, 0.0012432, 0.0012426, 0.001241, 0.0012382, 0.001241, 0.0012425, 0.0012398, 0.0012349, 0.001229, 0.0012221, 0.0012176, 0.0012155, 0.0012148, 0.0012144, 0.0012136, 0.0012117, 0.0012086, 0.0012045, 0.0011999, 0.0011955, 0.0011919, 0.0011895, 0.0011883, 0.0011878, 0.0011871, 0.0011854, 0.001182, 0.0011769, 0.0011708, 0.0011652, 0.0011608, 0.0011579, 0.0011557}, 
            {0.0017139, 0.0017261, 0.001735, 0.0017414, 0.0017511, 0.0017532, 0.0017606, 0.001767, 0.0017802, 0.0017944, 0.0018062, 0.0018127, 0.0018203, 0.0018244, 0.0018255, 0.0018252, 0.0018231, 0.0018249, 0.0018252, 0.0018206, 0.0018115, 0.0018007, 0.0017917, 0.0017868, 0.0017857, 0.001787, 0.0017889, 0.0017899, 0.0017893, 0.0017865, 0.001782, 0.0017767, 0.0017717, 0.0017681, 0.0017664, 0.0017669, 0.0017684, 0.0017698, 0.0017693, 0.0017659, 0.0017596}, 
            {0.0027843, 0.0028564, 0.0028856, 0.0028888, 0.0028974, 0.002897, 0.0028996, 0.0028969, 0.0028916, 0.0028845, 0.0028787, 0.0028705, 0.0028785, 0.0029037, 0.0029326, 0.0029573, 0.0029774, 0.00301, 0.003037, 0.0030588, 0.0030799, 0.0031013, 0.0031215, 0.0031381, 0.0031475, 0.0031465, 0.0031368, 0.0031227, 0.0031094, 0.0031004, 0.0030973, 0.0030991, 0.0031038, 0.0031086, 0.0031115, 0.0031109, 0.003107, 0.0031012, 0.0030954, 0.003092, 0.0030927}, 
        };
        
        maleChildMortality = new double[][]{
            {0.00048215, 0.00047058, 0.00045995, 0.00044988, 0.0004159, 0.00042778, 0.00041631, 0.00040106, 0.00038806, 0.00038147, 0.00037308, 0.0003637, 0.00035692, 0.0003476, 0.00033876, 0.00032997, 0.00032123, 0.00031253, 0.00030411, 0.00029594, 0.00028802, 0.00028034, 0.00027289, 0.00026568, 0.00025868, 0.00025189, 0.00024531, 0.00023893, 0.00023274, 0.00022674, 0.00022092, 0.00021528, 0.0002098, 0.0002045, 0.00019935, 0.00019435, 0.00018951, 0.00018481, 0.00018025, 0.00017583, 0.00017154}, 
            {0.00018778, 0.00018344, 0.00017881, 0.00017428, 0.00016071, 0.0001644, 0.0001591, 0.00015273, 0.00014697, 0.00014352, 0.00013985, 0.00013589, 0.00013227, 0.00012884, 0.00012464, 0.00012033, 0.00011605, 0.00011293, 0.00010991, 0.00010698, 0.00010414, 0.00010139, 9.87E-05, 9.61E-05, 9.36E-05, 9.12E-05, 8.89E-05, 8.66E-05, 8.44E-05, 8.22E-05, 8.02E-05, 7.82E-05, 7.62E-05, 7.43E-05, 7.25E-05, 7.07E-05, 6.90E-05, 6.73E-05, 6.57E-05, 6.42E-05, 6.26E-05}, 
            {7.09E-05, 6.92E-05, 6.79E-05, 6.63E-05, 6.13E-05, 6.27E-05, 6.07E-05, 5.83E-05, 5.62E-05, 5.48E-05, 5.34E-05, 5.21E-05, 5.07E-05, 4.94E-05, 4.81E-05, 4.65E-05, 4.50E-05, 4.37E-05, 4.24E-05, 4.12E-05, 4.00E-05, 3.88E-05, 3.77E-05, 3.66E-05, 3.55E-05, 3.45E-05, 3.35E-05, 3.25E-05, 3.16E-05, 3.07E-05, 2.98E-05, 2.90E-05, 2.81E-05, 2.73E-05, 2.65E-05, 2.58E-05, 2.51E-05, 2.43E-05, 2.36E-05, 2.30E-05, 2.23E-05}, 
            {3.52E-05, 3.43E-05, 3.35E-05, 3.29E-05, 3.05E-05, 3.11E-05, 3.02E-05, 2.90E-05, 2.79E-05, 2.72E-05, 2.65E-05, 2.58E-05, 2.52E-05, 2.45E-05, 2.39E-05, 2.33E-05, 2.26E-05, 2.19E-05, 2.13E-05, 2.07E-05, 2.01E-05, 1.95E-05, 1.90E-05, 1.84E-05, 1.79E-05, 1.74E-05, 1.69E-05, 1.65E-05, 1.60E-05, 1.55E-05, 1.51E-05, 1.47E-05, 1.43E-05, 1.39E-05, 1.35E-05, 1.31E-05, 1.28E-05, 1.24E-05, 1.21E-05, 1.18E-05, 1.15E-05}, 
            {2.61E-05, 2.53E-05, 2.47E-05, 2.43E-05, 2.26E-05, 2.32E-05, 2.25E-05, 2.16E-05, 2.09E-05, 2.04E-05, 1.99E-05, 1.94E-05, 1.89E-05, 1.85E-05, 1.80E-05, 1.76E-05, 1.71E-05, 1.67E-05, 1.63E-05, 1.59E-05, 1.56E-05, 1.52E-05, 1.48E-05, 1.45E-05, 1.41E-05, 1.38E-05, 1.35E-05, 1.32E-05, 1.29E-05, 1.26E-05, 1.23E-05, 1.20E-05, 1.17E-05, 1.15E-05, 1.12E-05, 1.10E-05, 1.07E-05, 1.05E-05, 1.02E-05, 1.00E-05, 9.79E-06}, 
            {2.43E-05, 2.37E-05, 2.32E-05, 2.27E-05, 2.13E-05, 2.19E-05, 2.14E-05, 2.07E-05, 2.01E-05, 1.97E-05, 1.92E-05, 1.88E-05, 1.84E-05, 1.80E-05, 1.76E-05, 1.72E-05, 1.69E-05, 1.66E-05, 1.62E-05, 1.59E-05, 1.56E-05, 1.53E-05, 1.50E-05, 1.47E-05, 1.44E-05, 1.42E-05, 1.39E-05, 1.36E-05, 1.34E-05, 1.31E-05, 1.29E-05, 1.26E-05, 1.24E-05, 1.21E-05, 1.19E-05, 1.17E-05, 1.15E-05, 1.12E-05, 1.10E-05, 1.08E-05, 1.06E-05}, 
            {2.19E-05, 2.14E-05, 2.10E-05, 2.07E-05, 1.94E-05, 2.00E-05, 1.97E-05, 1.91E-05, 1.86E-05, 1.83E-05, 1.79E-05, 1.75E-05, 1.72E-05, 1.69E-05, 1.66E-05, 1.63E-05, 1.59E-05, 1.56E-05, 1.54E-05, 1.51E-05, 1.48E-05, 1.45E-05, 1.43E-05, 1.40E-05, 1.37E-05, 1.35E-05, 1.32E-05, 1.30E-05, 1.28E-05, 1.25E-05, 1.23E-05, 1.21E-05, 1.19E-05, 1.17E-05, 1.14E-05, 1.12E-05, 1.10E-05, 1.08E-05, 1.06E-05, 1.05E-05, 1.03E-05}, 
            {1.88E-05, 1.85E-05, 1.82E-05, 1.79E-05, 1.68E-05, 1.74E-05, 1.71E-05, 1.67E-05, 1.63E-05, 1.61E-05, 1.59E-05, 1.56E-05, 1.53E-05, 1.51E-05, 1.48E-05, 1.46E-05, 1.44E-05, 1.41E-05, 1.39E-05, 1.36E-05, 1.34E-05, 1.31E-05, 1.29E-05, 1.27E-05, 1.25E-05, 1.22E-05, 1.20E-05, 1.18E-05, 1.16E-05, 1.14E-05, 1.12E-05, 1.10E-05, 1.08E-05, 1.07E-05, 1.05E-05, 1.03E-05, 1.01E-05, 9.94E-06, 9.77E-06, 9.61E-06, 9.44E-06}, 
            {1.49E-05, 1.47E-05, 1.46E-05, 1.44E-05, 1.36E-05, 1.41E-05, 1.39E-05, 1.36E-05, 1.34E-05, 1.32E-05, 1.31E-05, 1.29E-05, 1.27E-05, 1.25E-05, 1.23E-05, 1.22E-05, 1.20E-05, 1.18E-05, 1.16E-05, 1.14E-05, 1.12E-05, 1.10E-05, 1.08E-05, 1.06E-05, 1.05E-05, 1.03E-05, 1.01E-05, 9.93E-06, 9.76E-06, 9.60E-06, 9.44E-06, 9.28E-06, 9.12E-06, 8.97E-06, 8.82E-06, 8.67E-06, 8.52E-06, 8.38E-06, 8.24E-06, 8.11E-06, 7.97E-06}, 
            {1.19E-05, 1.19E-05, 1.18E-05, 1.18E-05, 1.11E-05, 1.16E-05, 1.14E-05, 1.12E-05, 1.11E-05, 1.10E-05, 1.09E-05, 1.08E-05, 1.07E-05, 1.06E-05, 1.05E-05, 1.03E-05, 1.02E-05, 1.01E-05, 9.94E-06, 9.81E-06, 9.67E-06, 9.54E-06, 9.41E-06, 9.29E-06, 9.16E-06, 9.04E-06, 8.92E-06, 8.80E-06, 8.68E-06, 8.56E-06, 8.45E-06, 8.34E-06, 8.23E-06, 8.12E-06, 8.02E-06, 7.91E-06, 7.81E-06, 7.71E-06, 7.61E-06, 7.51E-06, 7.41E-06}, 
        };
                
        femaleChildMortality = new double[][]{
            {0.00043244, 0.00042357, 0.00041339, 0.000404, 0.0003733, 0.0003835, 0.00037264, 0.00035893, 0.00034634, 0.00033942, 0.00033166, 0.00032282, 0.00031749, 0.00030946, 0.00030148, 0.00029356, 0.00028568, 0.00027774, 0.00027005, 0.00026259, 0.00025537, 0.00024838, 0.0002416, 0.00023503, 0.00022867, 0.0002225, 0.00021652, 0.00021073, 0.00020512, 0.00019968, 0.00019441, 0.00018931, 0.00018436, 0.00017956, 0.00017491, 0.0001704, 0.00016603, 0.0001618, 0.00015769, 0.00015371, 0.00014986}, 
            {0.00017397, 0.0001704, 0.00016537, 0.00016074, 0.00014787, 0.00015095, 0.00014565, 0.00013958, 0.00013392, 0.00013041, 0.00012688, 0.00012304, 0.00011981, 0.00011695, 0.00011313, 0.00010914, 0.00010518, 0.00010213, 9.92E-05, 9.63E-05, 9.35E-05, 9.09E-05, 8.83E-05, 8.58E-05, 8.34E-05, 8.10E-05, 7.88E-05, 7.66E-05, 7.45E-05, 7.24E-05, 7.05E-05, 6.86E-05, 6.67E-05, 6.49E-05, 6.32E-05, 6.15E-05, 5.99E-05, 5.84E-05, 5.69E-05, 5.54E-05, 5.40E-05}, 
            {5.58E-05, 5.46E-05, 5.33E-05, 5.19E-05, 4.78E-05, 4.88E-05, 4.71E-05, 4.51E-05, 4.33E-05, 4.22E-05, 4.10E-05, 3.99E-05, 3.89E-05, 3.79E-05, 3.69E-05, 3.57E-05, 3.45E-05, 3.34E-05, 3.24E-05, 3.14E-05, 3.04E-05, 2.94E-05, 2.85E-05, 2.76E-05, 2.67E-05, 2.59E-05, 2.51E-05, 2.43E-05, 2.35E-05, 2.28E-05, 2.21E-05, 2.14E-05, 2.07E-05, 2.01E-05, 1.95E-05, 1.89E-05, 1.83E-05, 1.77E-05, 1.72E-05, 1.66E-05, 1.61E-05}, 
            {2.46E-05, 2.40E-05, 2.34E-05, 2.28E-05, 2.11E-05, 2.15E-05, 2.07E-05, 1.98E-05, 1.90E-05, 1.85E-05, 1.79E-05, 1.75E-05, 1.70E-05, 1.66E-05, 1.61E-05, 1.57E-05, 1.53E-05, 1.48E-05, 1.43E-05, 1.39E-05, 1.35E-05, 1.31E-05, 1.27E-05, 1.23E-05, 1.19E-05, 1.16E-05, 1.12E-05, 1.09E-05, 1.06E-05, 1.02E-05, 9.94E-06, 9.64E-06, 9.36E-06, 9.09E-06, 8.82E-06, 8.57E-06, 8.32E-06, 8.08E-06, 7.85E-06, 7.62E-06, 7.41E-06}, 
            {1.63E-05, 1.59E-05, 1.54E-05, 1.50E-05, 1.39E-05, 1.42E-05, 1.37E-05, 1.31E-05, 1.26E-05, 1.22E-05, 1.19E-05, 1.16E-05, 1.13E-05, 1.10E-05, 1.07E-05, 1.04E-05, 1.02E-05, 9.88E-06, 9.59E-06, 9.32E-06, 9.05E-06, 8.79E-06, 8.54E-06, 8.30E-06, 8.06E-06, 7.84E-06, 7.61E-06, 7.40E-06, 7.19E-06, 6.99E-06, 6.80E-06, 6.61E-06, 6.43E-06, 6.26E-06, 6.09E-06, 5.92E-06, 5.76E-06, 5.61E-06, 5.46E-06, 5.31E-06, 5.17E-06}, 
            {1.48E-05, 1.44E-05, 1.41E-05, 1.37E-05, 1.28E-05, 1.31E-05, 1.27E-05, 1.22E-05, 1.17E-05, 1.14E-05, 1.11E-05, 1.09E-05, 1.06E-05, 1.04E-05, 1.01E-05, 9.91E-06, 9.69E-06, 9.42E-06, 9.17E-06, 8.91E-06, 8.67E-06, 8.43E-06, 8.21E-06, 7.98E-06, 7.77E-06, 7.56E-06, 7.35E-06, 7.16E-06, 6.96E-06, 6.78E-06, 6.60E-06, 6.42E-06, 6.25E-06, 6.09E-06, 5.93E-06, 5.77E-06, 5.62E-06, 5.48E-06, 5.33E-06, 5.20E-06, 5.06E-06}, 
            {1.33E-05, 1.31E-05, 1.27E-05, 1.25E-05, 1.16E-05, 1.19E-05, 1.16E-05, 1.12E-05, 1.09E-05, 1.06E-05, 1.04E-05, 1.02E-05, 9.95E-06, 9.75E-06, 9.56E-06, 9.36E-06, 9.16E-06, 8.91E-06, 8.66E-06, 8.43E-06, 8.20E-06, 7.97E-06, 7.75E-06, 7.54E-06, 7.34E-06, 7.14E-06, 6.94E-06, 6.76E-06, 6.57E-06, 6.40E-06, 6.23E-06, 6.06E-06, 5.90E-06, 5.74E-06, 5.59E-06, 5.44E-06, 5.29E-06, 5.15E-06, 5.02E-06, 4.89E-06, 4.76E-06}, 
            {1.14E-05, 1.12E-05, 1.10E-05, 1.08E-05, 1.01E-05, 1.04E-05, 1.01E-05, 9.86E-06, 9.58E-06, 9.42E-06, 9.24E-06, 9.06E-06, 8.89E-06, 8.73E-06, 8.58E-06, 8.43E-06, 8.27E-06, 8.04E-06, 7.82E-06, 7.61E-06, 7.40E-06, 7.20E-06, 7.01E-06, 6.82E-06, 6.63E-06, 6.45E-06, 6.28E-06, 6.11E-06, 5.94E-06, 5.78E-06, 5.63E-06, 5.48E-06, 5.33E-06, 5.19E-06, 5.05E-06, 4.92E-06, 4.79E-06, 4.66E-06, 4.54E-06, 4.42E-06, 4.30E-06}, 
            {9.28E-06, 9.15E-06, 8.99E-06, 8.85E-06, 8.32E-06, 8.57E-06, 8.41E-06, 8.20E-06, 8.00E-06, 7.90E-06, 7.79E-06, 7.66E-06, 7.54E-06, 7.42E-06, 7.30E-06, 7.19E-06, 7.08E-06, 6.89E-06, 6.71E-06, 6.53E-06, 6.36E-06, 6.20E-06, 6.04E-06, 5.88E-06, 5.73E-06, 5.58E-06, 5.43E-06, 5.29E-06, 5.16E-06, 5.02E-06, 4.90E-06, 4.77E-06, 4.65E-06, 4.53E-06, 4.41E-06, 4.30E-06, 4.19E-06, 4.09E-06, 3.99E-06, 3.89E-06, 3.79E-06}, 
            {7.76E-06, 7.68E-06, 7.58E-06, 7.49E-06, 7.07E-06, 7.30E-06, 7.19E-06, 7.04E-06, 6.90E-06, 6.84E-06, 6.76E-06, 6.69E-06, 6.60E-06, 6.51E-06, 6.43E-06, 6.35E-06, 6.26E-06, 6.13E-06, 5.99E-06, 5.86E-06, 5.74E-06, 5.62E-06, 5.49E-06, 5.38E-06, 5.26E-06, 5.15E-06, 5.04E-06, 4.93E-06, 4.83E-06, 4.73E-06, 4.63E-06, 4.53E-06, 4.44E-06, 4.34E-06, 4.25E-06, 4.16E-06, 4.08E-06, 3.99E-06, 3.91E-06, 3.83E-06, 3.75E-06}, 
        };
        
    }
    
    private void loadFertility(){
        //age: 10-14,15-19,20-24,...,40-44,45-49 (no children thereafter
        //year: 1985,1986,...,2025
        //mortTable[age][year]
        fertility = new double[][] {
            {0.08217028, 0.081803008, 0.081587681, 0.081630468, 0.081920553, 0.082331365, 0.082785163, 0.083010235, 0.082902081, 0.082410994, 0.081574666, 0.077949144, 0.074244361, 0.070854408, 0.067808287, 0.06507499, 0.064191607, 0.063303667, 0.062363494, 0.061378314, 0.060389904, 0.059459757, 0.058550692, 0.05764763, 0.056755191, 0.055871894, 0.054990722, 0.053799674, 0.052955375, 0.052350118, 0.05191373, 0.051571957, 0.050833967, 0.050055678, 0.049302134, 0.048601726, 0.048000078, 0.047461741, 0.046925989, 0.046390116, 0.045838368},
            {0.191383228, 0.187518885, 0.183556558, 0.179444568, 0.175167634, 0.170737451, 0.165955567, 0.161078121, 0.15612925, 0.151014795, 0.145642416, 0.13988183, 0.13388732, 0.128251319, 0.122991404, 0.118055972, 0.117051627, 0.116085105, 0.11520127, 0.11441599, 0.113716761, 0.113076264, 0.112412388, 0.11170646, 0.110972194, 0.110236569, 0.109528363, 0.10882826, 0.108130349, 0.107438135, 0.106751706, 0.106068248, 0.105240487, 0.104581989, 0.104043336, 0.103577583, 0.103132334, 0.102525497, 0.101903181, 0.101296489, 0.100718466},
            {0.209300521, 0.204623702, 0.199945507, 0.195216926, 0.190358795, 0.185291507, 0.179596437, 0.173612748, 0.167461929, 0.161196994, 0.15480948, 0.151011229, 0.146964458, 0.143220904, 0.139946193, 0.137156407, 0.134570504, 0.132282123, 0.130266685, 0.128504781, 0.126970622, 0.125627648, 0.124430897, 0.1233388, 0.122324839, 0.121379414, 0.120502539, 0.119710265, 0.119006089, 0.118379933, 0.117811101, 0.117282975, 0.116797378, 0.116351303, 0.115939677, 0.11555853, 0.115204831, 0.114890256, 0.114583585, 0.114287322, 0.114001458},
            {0.165603111, 0.162174991, 0.158630422, 0.154982973, 0.151263826, 0.147487606, 0.143422188, 0.139175796, 0.134729538, 0.130049773, 0.125124923, 0.123299193, 0.121329485, 0.119435461, 0.117807268, 0.116579118, 0.112475077, 0.10906081, 0.106175733, 0.103703522, 0.101573731, 0.099751754, 0.098223679, 0.096983561, 0.096018248, 0.095293646, 0.094747314, 0.094300741, 0.093879197, 0.093441164, 0.092982833, 0.092519238, 0.092132619, 0.091850558, 0.09166212, 0.091525638, 0.091386631, 0.091271674, 0.091186904, 0.09112598, 0.091085958},
            {0.110840485, 0.10895962, 0.106997609, 0.10497429, 0.102874584, 0.100681805, 0.098324599, 0.095794127, 0.093113534, 0.090313165, 0.087424225, 0.084973562, 0.082452442, 0.079913821, 0.077359647, 0.074806362, 0.071900852, 0.069236974, 0.066832072, 0.064691628, 0.062800996, 0.061117784, 0.059577383, 0.058119889, 0.056715738, 0.05536723, 0.054098355, 0.052941945, 0.051927579, 0.051069778, 0.050357025, 0.04974664, 0.049180978, 0.048602227, 0.047984677, 0.047334738, 0.046671929, 0.046087143, 0.045599559, 0.045196206, 0.044843975},
            {0.058123549, 0.056700513, 0.055521857, 0.054380123, 0.053178177, 0.051882651, 0.050482506, 0.049001408, 0.047454003, 0.045834512, 0.044140252, 0.041887716, 0.039598019, 0.037293284, 0.034991373, 0.032715121, 0.030969991, 0.029383782, 0.027936541, 0.026602071, 0.025362501, 0.024216693, 0.023173452, 0.02224762, 0.021444575, 0.020755422, 0.020152007, 0.01959691, 0.019058818, 0.018526938, 0.018007948, 0.017520079, 0.017082841, 0.016710621, 0.01640726, 0.016163792, 0.015956503, 0.015759276, 0.015547815, 0.01531626, 0.015071142},
            {0.023287942, 0.021563243, 0.01981084, 0.018140837, 0.016633552, 0.015322161, 0.014150236, 0.012990746, 0.011747746, 0.01040531, 0.008985057, 0.008902336, 0.009005132, 0.009145663, 0.009317542, 0.009510381, 0.008379574, 0.00745972, 0.006708593, 0.006092974, 0.005587021, 0.005169959, 0.004826797, 0.004542447, 0.004301698, 0.00409303, 0.003911779, 0.003758179, 0.003635482, 0.003545638, 0.003486838, 0.003449885, 0.003420493, 0.003386037, 0.003341268, 0.003288241, 0.003234538, 0.003190276, 0.003163873, 0.003159258, 0.003174291},
        };
    }

    private void grabAgentDistribution() {
        //grab distribution of agents
        agents = state.getSubPopulationTypes();
        Bag numbers = state.getSubPopulationNum();
        num = new int[numbers.size()];
        num[0] = (int) numbers.get(0);
        for(int i = 1; i < numbers.size(); i++){
            num[i] = num[i-1] + (int) numbers.get(i);
        }
        attributes = state.getSubPopulationArgs();
    }
    
    private Agent newAgent(SimpactII s){
        int n = state.random.nextInt(state.getPopulation());
        int i = 0;
        for(; num[i] < n; i++){ continue; }
        
        //make a new agent of type i
        Class c = (Class) agents.get(i);
        HashMap attri = (HashMap) attributes.get(i);
        Agent a;
        try {
            a = (Agent) c.getConstructor(new Class[]{SimpactII.class, HashMap.class}).newInstance(s, attri);
        } catch (Exception e) {
            throw new RuntimeException("Exception occurred while trying to replace agent " + c + "\n" + e.getMessage());
        }
        a.age = 0;
        //attributes that we know are necessary:
        a.attributes.remove("AIDSDeath");
        a.attributes.remove("ARVStart");
        a.attributes.remove("ARVStop");
        a.attributes.remove("HIVTest");
        a.attributes.put("circumcised",false);
        a.attributes.put("isCondomUser",false);
        a.attributes.put("infectivityChangeFrom", 1.0);
        a.attributes.put("infectivityChangeTo", 1.0);       
        return a;
    }
}
